/*
Author: Nikolai Alexander-Himlan
Last Update: 3/27/15
*/

NOTE: the entire code base may not conform to the following standards, as much of it was written before deciding on these standards.

variables may start with the following letters to indicate information about them (in order): 
	g = global variable
	m = member variable
	s = static variable (if not otherwise indicated by FULL_CASE naming format)
	c = const variable (the intention is for it to be const, even if it is not actually const)
	p = pointer
	a = [pure] array (does not include std::vector, etc...), this includes pointer variables which are intended to be used as the head of an array
variables will not start with one of the above letters if they are public members.

classes are organized in order of private->protected->public, with variables followed by functions (starting with constructor/destructor).  Though if a variable is static or const it will be stored at the end of the class so member variables are listed first in the watch window for the debugger (unless the const value is being used for a name).

functions are primarily categorized in the following ways (in order declared): 
//for actual values
	Getters = get existing variables, generally just act as an accessor.
	Setters = set an exising variable, generally just act as an accessor, but sometimes set additional data.
//for implicit values
	Properties = information about the object which is not explicitly stored.
	Modifiers = implicit setters, or setters for implicit properties.
//for more complex things
	Calculations = any big calculations which combine a bunch of different things but don't make any changes.
	Actions = the object does something, usually involving a calculation.
//system
	Operators = overloaded operators.
	Type Conversions = type operators and conversion functions
//static
	Static = static functions. (durr)

functions start with a capital letter unless starting with one of the following words as a prefix (is not a prefix if the only word), which indicates its purpose: 
	get = indicates a getter (or false getter property)
	set = indicates a setter (or false setter action)
	ref = indicates a get-by-reference function, meaning that modifying the return value modifies the class.  Located under Getters. (for now)
	reset = variation on set (setter)
	add = put something into a container
	remove = take something out of a container
	clear = set empty/null
	has/is = bool getter/property
the function name may also start with a lower case letter if it is an extension of an existing system/built-in function, in which case the function will start with the name of the function being extended, case intact. (ex. absInv() extends the abs() function)

some function return values should generally be treated in certain ways: 
	Getters = the returned value should be a const& reference to the actual variable, this saves memory, is faster, makes it clear that the actual value is being returned, and differentiates it from implicit properties and calculations.
	ref = the returned value is a & reference, not const.  Modifying the returned value should modify the actual variable.
	Actions = should return a boolean indicating if the action succeeded, or potentially return an error code indicating what happened (in the future).  If error codes start being used, functions should return true for failed and false for succeed, while this is less intuitive it keeps consistant with error codes. (0==false, 1==true, so return ifFailed)
